// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_estimate_model
Rcpp::List rcpp_estimate_model(arma::mat data, int i_index, int t_index, int y_index, long long Ndraw, long long Nburn, std::string b_prior, double lambda_b, double c0, double C0, double va, double vb, double tau, bool use_phiinit, bool const_val, bool ife, bool tfe, bool iis, bool sis, int new_par_method, int new_par_hesstype, int new_par_optim_method, int new_par_optim_maxit, int new_par_B, int new_par_knownphi, int new_par_r, double new_par_alpha, double new_par_lambda, int computation_strategy);
RcppExport SEXP _BISAM_rcpp_estimate_model(SEXP dataSEXP, SEXP i_indexSEXP, SEXP t_indexSEXP, SEXP y_indexSEXP, SEXP NdrawSEXP, SEXP NburnSEXP, SEXP b_priorSEXP, SEXP lambda_bSEXP, SEXP c0SEXP, SEXP C0SEXP, SEXP vaSEXP, SEXP vbSEXP, SEXP tauSEXP, SEXP use_phiinitSEXP, SEXP const_valSEXP, SEXP ifeSEXP, SEXP tfeSEXP, SEXP iisSEXP, SEXP sisSEXP, SEXP new_par_methodSEXP, SEXP new_par_hesstypeSEXP, SEXP new_par_optim_methodSEXP, SEXP new_par_optim_maxitSEXP, SEXP new_par_BSEXP, SEXP new_par_knownphiSEXP, SEXP new_par_rSEXP, SEXP new_par_alphaSEXP, SEXP new_par_lambdaSEXP, SEXP computation_strategySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type i_index(i_indexSEXP);
    Rcpp::traits::input_parameter< int >::type t_index(t_indexSEXP);
    Rcpp::traits::input_parameter< int >::type y_index(y_indexSEXP);
    Rcpp::traits::input_parameter< long long >::type Ndraw(NdrawSEXP);
    Rcpp::traits::input_parameter< long long >::type Nburn(NburnSEXP);
    Rcpp::traits::input_parameter< std::string >::type b_prior(b_priorSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_b(lambda_bSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< double >::type va(vaSEXP);
    Rcpp::traits::input_parameter< double >::type vb(vbSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type use_phiinit(use_phiinitSEXP);
    Rcpp::traits::input_parameter< bool >::type const_val(const_valSEXP);
    Rcpp::traits::input_parameter< bool >::type ife(ifeSEXP);
    Rcpp::traits::input_parameter< bool >::type tfe(tfeSEXP);
    Rcpp::traits::input_parameter< bool >::type iis(iisSEXP);
    Rcpp::traits::input_parameter< bool >::type sis(sisSEXP);
    Rcpp::traits::input_parameter< int >::type new_par_method(new_par_methodSEXP);
    Rcpp::traits::input_parameter< int >::type new_par_hesstype(new_par_hesstypeSEXP);
    Rcpp::traits::input_parameter< int >::type new_par_optim_method(new_par_optim_methodSEXP);
    Rcpp::traits::input_parameter< int >::type new_par_optim_maxit(new_par_optim_maxitSEXP);
    Rcpp::traits::input_parameter< int >::type new_par_B(new_par_BSEXP);
    Rcpp::traits::input_parameter< int >::type new_par_knownphi(new_par_knownphiSEXP);
    Rcpp::traits::input_parameter< int >::type new_par_r(new_par_rSEXP);
    Rcpp::traits::input_parameter< double >::type new_par_alpha(new_par_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type new_par_lambda(new_par_lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type computation_strategy(computation_strategySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_estimate_model(data, i_index, t_index, y_index, Ndraw, Nburn, b_prior, lambda_b, c0, C0, va, vb, tau, use_phiinit, const_val, ife, tfe, iis, sis, new_par_method, new_par_hesstype, new_par_optim_method, new_par_optim_maxit, new_par_B, new_par_knownphi, new_par_r, new_par_alpha, new_par_lambda, computation_strategy));
    return rcpp_result_gen;
END_RCPP
}
// comp_strategy_standard
int comp_strategy_standard();
RcppExport SEXP _BISAM_comp_strategy_standard() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(comp_strategy_standard());
    return rcpp_result_gen;
END_RCPP
}
// comp_strategy_split_sequential
int comp_strategy_split_sequential();
RcppExport SEXP _BISAM_comp_strategy_split_sequential() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(comp_strategy_split_sequential());
    return rcpp_result_gen;
END_RCPP
}
// comp_strategy_split_parallel
int comp_strategy_split_parallel();
RcppExport SEXP _BISAM_comp_strategy_split_parallel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(comp_strategy_split_parallel());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BISAM_rcpp_estimate_model", (DL_FUNC) &_BISAM_rcpp_estimate_model, 29},
    {"_BISAM_comp_strategy_standard", (DL_FUNC) &_BISAM_comp_strategy_standard, 0},
    {"_BISAM_comp_strategy_split_sequential", (DL_FUNC) &_BISAM_comp_strategy_split_sequential, 0},
    {"_BISAM_comp_strategy_split_parallel", (DL_FUNC) &_BISAM_comp_strategy_split_parallel, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_BISAM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
