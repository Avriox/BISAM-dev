name: R Package Auto-Build

on:
  push:
    branches:
      - dev

# Add permissions to allow the workflow to push to branches
permissions:
  contents: write

jobs:
  build-r-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from dev branch
        uses: actions/checkout@v4 # Use latest checkout action
        with:
          ref: dev # Explicitly check out the dev branch
          fetch-depth: 0 # Fetch all history needed for branch operations
          # Token is implicitly used by actions/checkout@v4 for repo access

      - name: Debug Initial Repository Structure (dev branch)
        run: |
          echo "Current directory: $(pwd)"
          echo "Initial repository contents (dev branch):"
          ls -laR
          echo "--------------------"

      - name: Setup Git Identity
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Create or Reset r-package-build Branch
        run: |
          # Ensure we are on the dev branch initially
          git checkout dev

          # Delete the local r-package-build branch if it exists
          git branch -D r-package-build || true

          # Delete the remote r-package-build branch if it exists
          git push origin --delete r-package-build || true

          # Create a new r-package-build branch based on the current state of dev
          git checkout -b r-package-build
          echo "Created new r-package-build branch from dev"

      - name: Prepare R Package Structure
        run: |
          echo "Starting R package structure preparation..."

          # 1. Create a temporary directory to build the clean package structure
          mkdir ../r_package_clean_build
          TEMP_DIR="../r_package_clean_build"
          echo "Created temporary build directory: $TEMP_DIR"

          # 2. Create the 'src' directory within the temp dir
          mkdir -p "$TEMP_DIR/src"
          echo "Created $TEMP_DIR/src directory"

          # 3. Find and copy all .cpp and .h files (excluding main.cpp) into the temp src directory
          echo "Searching for .cpp and .h files (excluding main.cpp)..."
          find . -type f \( -name '*.cpp' -o -name '*.h' \) -not -name 'main.cpp' -print -exec cp {} "$TEMP_DIR/src/" \;
          echo "Copied C++/H files to $TEMP_DIR/src/"
          echo "Contents of $TEMP_DIR/src/:"
          ls -la "$TEMP_DIR/src/"

          # 4. Copy standard R package directories and files to the temp directory
          echo "Copying standard R package components..."
          # Use rsync for better handling of existing/non-existing dirs and verbose output
          rsync -av --ignore-errors R/ "$TEMP_DIR/R/" || echo "No R directory found or error copying."
          rsync -av --ignore-errors man/ "$TEMP_DIR/man/" || echo "No man directory found or error copying."
          rsync -av --ignore-errors data/ "$TEMP_DIR/data/" || echo "No data directory found or error copying."
          rsync -av --ignore-errors inst/ "$TEMP_DIR/inst/" || echo "No inst directory found or error copying."
          rsync -av --ignore-errors vignettes/ "$TEMP_DIR/vignettes/" || echo "No vignettes directory found or error copying."
          rsync -av --ignore-errors tests/ "$TEMP_DIR/tests/" || echo "No tests directory found or error copying."

          cp DESCRIPTION "$TEMP_DIR/" 2>/dev/null || echo "No DESCRIPTION file found."
          cp NAMESPACE "$TEMP_DIR/" 2>/dev/null || echo "No NAMESPACE file found."
          cp README.md "$TEMP_DIR/" 2>/dev/null || echo "No README.md file found."
          cp LICENSE* "$TEMP_DIR/" 2>/dev/null || echo "No LICENSE file(s) found." # Handle LICENSE or LICENSE.md etc.
          cp .Rbuildignore "$TEMP_DIR/" 2>/dev/null || echo "No .Rbuildignore file found."

          echo "Contents of $TEMP_DIR before cleanup:"
          ls -la "$TEMP_DIR"

          # 5. Clean the current working directory (delete everything except .git)
          echo "Cleaning working directory..."
          git rm -rf --quiet . # Remove all tracked files from index and working dir
          # Remove any remaining untracked files/dirs except .git and the temp dir
          find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -path "$TEMP_DIR" -exec rm -rf {} \;
          echo "Working directory cleaned."
          ls -la

          # 6. Move the prepared package structure from the temp directory to the root
          echo "Moving clean package structure from $TEMP_DIR to root..."
          # Use rsync to move contents; ensures dotfiles are included if they exist in temp
          rsync -av "$TEMP_DIR/" .
          echo "Move complete."

          # 7. Remove the temporary directory
          echo "Removing temporary directory $TEMP_DIR..."
          rm -rf "$TEMP_DIR"
          echo "Temporary directory removed."

          # 8. Final check of the structure
          echo "Final repository structure (r-package-build branch):"
          ls -la
          if [ -d "src" ]; then
            echo "Contents of src/ directory:"
            ls -la src/
          else
             echo "src/ directory does NOT exist!"
          fi

      - name: Check for Modified Files
        id: check_modified # Give it a unique ID
        run: |
          # Check if there are any changes staged or unstaged
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes detected compared to the initial state of r-package-build."
            echo "modified=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected."
            git status --porcelain # Show changes for debugging
            echo "modified=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Changes
        if: steps.check_modified.outputs.modified == 'true'
        run: |
          git add .
          # Check if there's anything to commit after adding (git add might not stage anything if files are identical)
          if git diff --staged --quiet; then
            echo "No changes staged for commit."
          else
            git commit -m "Auto-build R package structure [skip ci]"
            echo "Changes committed."
            # Use the GITHUB_TOKEN for authentication
            git push --force origin r-package-build
            echo "Successfully force-pushed to r-package-build branch"
           fi
        env:
          # GITHUB_TOKEN is automatically available to the runner
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle No Changes Case
        if: steps.check_modified.outputs.modified == 'false'
        run: |
          echo "No structural changes needed for the R package build. Branch 'r-package-build' reflects the latest 'dev' structure suitable for packaging."
          # Optionally, still force-push to ensure the remote branch matches the clean state,
          # even if no files *content* changed, the history is now clean.
          # git push --force origin r-package-build
          # echo "Force-pushed clean structure to r-package-build branch even without content changes."